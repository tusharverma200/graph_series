class Solution {
  public:
    // Function to find the number of islands.
    
    
    void bfs(int n, int m, int i, int j, vector<vector<int>>&vis, vector<vector<char>>& grid ){
       vis[i][j]=1;
       queue<pair<int , int>>q;
       q.push({i,j});
       
       while(!q.empty()){
           int row=q.front().first;
           int col=q.front().second;
           q.pop();
           for(int delr=-1; delr<=1; delr++){
               for(int delc=-1; delc<=1; delc++){
                   int nrow=row+delr;
                   int ncol=col+delc;
                   
                   if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && grid[nrow][ncol]=='1'){
                       vis[nrow][ncol]=1;
                       q.push({nrow, ncol});
                   }
               }
           }
           
       }
              
    }
    int numIslands(vector<vector<char>>& grid) {
      int count=0;
      int n=grid.size();
      int m=grid[0].size();
      vector<vector<int>>vis(n, vector<int>(m,0));
      for(int i=0; i<n; i++){
          for(int j=0; j<m; j++){
              
              if(vis[i][j]==0 && grid[i][j]=='1'){
                  bfs(n, m, i, j, vis, grid);
                  count++;
              }
          }
      }
      return count;
    }
};
